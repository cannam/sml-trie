
Trie and persistent trie-based containers in Standard ML
========================================================

This is a trie library in Standard ML.

The library contains implementations of the following container
data structures:

   1. Trie and Trie Map
   2. Persistent Hash Map (implemented using bitmap tries)
   3. Persistent Array and Queue (implemented using bitmap tries)


1. TRIE AND TRIE MAP
--------------------

A trie is an ordered container. It stores a set of entries of a common
entry type, which is some sort of sequence (vector, list, string etc),
storing them in a tree structure according to their common prefixes,
branching where they diverge.

A plain trie just records the presence or absence of an entry in a
set, but a trie can also support a map container, in which each entry
(or key) has an associated value as well. A plain trie can be
expressed as a trie map whose value is of a valueless (unit) type.

As with a hash map or typical tree-map structure, membership testing
is generally fast. Unlike those, with a trie you can also quickly test
whether any prefix of a given entry appears in the trie, obtain the
longest such prefix, and find all entries with a given prefix. Like a
tree-backed container but not a hash table, a trie is ordered, and can
be enumerated in the sort order of the entry type.

This library provides persistent or immutable trie containers, in the
sense that all updates return a separate trie, without modifying the
one passed in, but internally sharing any unmodified parts with it.

The main signatures are:

 * TRIE (trie.sig) - signature of a trie set container with arbitrary
   entry type

 * TRIE_MAP (trie-map.sig) - signature of a polymorphic-value trie map
   container with arbitrary key type

 * PATTERN_MATCH_TRIE (pattern-match-trie.sig) - signature extending
   TRIE with the capability of matching sequences with wildcards in
   them. Unlike TRIE, this exposes the types of the individual
   elements in each entry (e.g. char, for a trie with string entries)

 * PATTERN_MATCH_TRIE_MAP (pattern-match-trie-map.sig) - signature
   extending TRIE_MAP with the capability of matching sequences with
   wildcards in them, like PATTERN_MATCH_TRIE

There are three core trie implementations provided, all implementing
trie-maps and provided in list-tries.sml:

 * ListMTrieMapFn - a functor that takes a comparable element type and
   implements a PATTERN_MATCH_TRIE_MAP in which the entry type is a
   list of that element. The implementation uses a red-black tree map
   (from the SML/NJ library) at every trie node. This is better suited
   to wide, shallow trie structures than narrow, deep ones, but can be
   surprisingly efficient in both time and space. Insertion and
   enumeration are relatively cheap and lookup is relatively more
   expensive.

 * ListATrieMapFn - a functor that takes an element type that can be
   mapped compactly onto a small integer range, and implements a
   PATTERN_MATCH_TRIE_MAP in which the entry type is a list of that
   element. The implementation uses an array (or rather a vector) at
   each node, extending the vector to span the range of inserted
   values. This may be better suited than ListMTrieMapFn to narrow,
   deep structures with small numbers of possible values at each
   node. Lookups are relatively cheap and insertion is relatively more
   expensive.

 * ListBTrieMapFn - a functor that takes an element type that can be
   mapped compactly onto a small integer range, and implements a
   PATTERN_MATCH_TRIE_MAP in which the entry type is a list of that
   element. The implementation uses a bitmap-compressed semi-sparse
   array at each node. This is only suited to entries whose elements
   map sparsely into a small range.

These functors adapt trie maps into set-type trie structures:

 * TrieFn (trie-fn.sml) - a functor that turns a TRIE_MAP into a TRIE

 * PatternMatchTrieFn (pattern-match-trie-fn.sml) - a functor that
   turns a PATTERN_MATCH_TRIE_MAP into a PATTERN_MATCH_TRIE

 * ListMTrieFn, ListATrieFn, ListBTrieFn (list-tries.sml) - shorthands
   that turn an element type directly into a trie set (the set
   equivalents of *TrieMapFn)

And there are specialisations for string entries:

 * StringMTrieMap, StringATrieMap, StringBTrieMap
   (string-trie-map.sml) - trie-maps with string key type

 * StringMTrie, StringATrie, StringBTrie (string-trie.sml) - trie sets
   with string key type

 * StringTrieMap, StringTrie - aliases for StringMTrieMap, StringMTrie


2. PERSISTENT HASH MAP
----------------------

This library contains an implementation of a persistent hash map
structure. This is a hash map in which every insertion or removal
returns a separate hash map, without modifying the one passed in, but
internally sharing any unmodified parts with it.

Like a classic hash table, the persistent hash map is unordered: keys
can be enumerated, but not in any guaranteed order, and do not need to
be comparable. It also requires that a hash function be provided for
the key type.

The implementation is a hash-array-mapped trie (HAMT) somewhat like
that popularised by the Clojure language. Hashes are 32-bit words and
collisions are handled using simple list chaining.

The main signature is:

 * PERSISTENT_HASH_MAP (persistent-hash-map.sig) - signature of a
   polymorphic-value hash map container with a fixed key type

And this is implemented by

 * PersistentHashMapFn (persistent-hash-map-fn.sml) - a functor that
   takes a hash key type and hash function and implements a
   PERSISTENT_HASH_MAP with that key type

There is a specialisation for string keys:

 * StringHashMap (string-hash-map.sml) - a PERSISTENT_HASH_MAP with
   string keys


3. PERSISTENT ARRAY AND QUEUE
-----------------------------

This library contains implementations of persistent array and queue
containers. These are immutable containers (like the standard vector)
that also support update, append, and pop-from-end operations. The
queue additionally supports prepend and pop-from-start, but in return
its plain iteration (foldl) is not as fast as the array. For both
containers, all of the update, append, prepend, and pop operations
take time independent of the container size.

The implementation uses an array-mapped-trie somewhat like that
popularised by the Clojure language. Both containers are limited in
size to 2^32 elements (by the implementation) or the maximum size of
Int.int (by the API), whichever is smaller. For the queue the
limitation is on current queue length, not on total number of
push/pops.

The main signatures are:

 * PERSISTENT_ARRAY (persistent-array.sig) - signature of a
   polymorphic-value persistent array container

 * PERSISTENT_QUEUE (persistent-queue.sig) - signature of a
   polymorphic-value persistent queue container

And these are implemented by

 * PersistentArray (persistent-array.sml) - a polymorphic-value
   persistent array container

 * PersistentQueue (persistent-queue.sml) - a polymorphic-value
   persistent queue container


TO BUILD & TEST
---------------

Basic unit tests are provided. With the MLton compiler, run

 $ mlton test.mlb && ./test

To use in other projects, include trie.mlb from your MLB file.


AUTHOR
------

Copyright 2015-2019 Chris Cannam.
MIT/X11 licence. See the file COPYING for details.


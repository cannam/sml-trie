
A persistent trie in Standard ML
================================

This is a fairly naive immutable implementation of a trie.

A trie is an ordered set container. It stores a set of entries of a
common type, which is some sort of sequence (vector, list, string
etc), filing them into a tree structure internally according to their
common prefixes.

As with a hash set or tree-backed set structure, membership testing is
generally fast. Unlike hash and tree sets, a with a trie you can also
quickly test whether any prefix of a given entry appears in the trie,
obtain the longest such prefix, and find all entries with a given
prefix. Like a tree-backed set but not a hash set, a trie supports
enumerating the entries in order.

This is a persistent or immutable implementation in the sense that add
and remove operations return a separate trie without modifying the one
passed in.

There are two fairly naive functor implementations included: the
ListMapTrieFn simply uses a red-black tree map (from the SML/NJ
library) at each node, and the ListArrayTrieFn uses an array at each
node.

ListMapTrieFn isn't all that memory efficient and is better suited to
wide, shallow tries than narrow, deep ones. It was written to provide
indexes for an in-memory RDF triple store, and its performance there
seems to be acceptable.

ListArrayTrieFn is better suited to narrow, deep tries where elements
can be compactly mapped onto integer indices for array lookup
(classically, an 8-bit char element, for a string trie).

This library contains

 * A signature TRIE for tries with arbitrary entry types.

 * A signature PATTERN_MATCH_TRIE extending TRIE with the capability
   of matching sequences with wildcards in them. Unlike TRIE, this
   exposes the types of the individual elements in each entry
   (e.g. char for a trie of strings).

 * A functor ListMapTrieFn which turns a list type into a structure
   implementing PATTERN_MATCH_TRIE (and so also implementing TRIE),
   provided that the list element type is comparable.

 * A functor ListArrayTrieFn which turns a list type into a structure
   implementing PATTERN_MATCH_TRIE (and so also implementing TRIE),
   provided that the list element type can be mapped compactly onto a
   small range of integer values for indexing into an array.

 * Structures StringMapTrie and StringArrayTrie which use
   ListMapTrieFn and ListArrayTrieFn respectively to make concrete
   string tries with different performance characteristics. The name
   StringTrie is also provided as an alias for StringMapTrie.

 * Basic unit tests.

With the MLton compiler, just run

 $ mlton test.mlb && ./test

To use in other projects, include trie.mlb from your MLB file.

Copyright 2015-2018 Chris Cannam.
MIT/X11 licence. See the file COPYING for details.


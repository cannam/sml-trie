
A persistent trie in Standard ML
================================

This is an immutable trie container implementation in Standard ML.

A trie is an ordered container. It stores a set of entries of a common
entry type, which is some sort of sequence (vector, list, string etc),
storing them in a tree structure according to their common prefixes,
branching where they diverge.

A trie can also support a map container, in which each entry (or key)
has an associated value rather than simply being present or absent. A
plain trie can also be expressed as a trie map whose "value" is of a
valueless (unit) type.

As with a hash map or typical tree-map structure, membership testing
is generally fast. Unlike them, with a trie you can also quickly test
whether any prefix of a given entry appears in the trie, obtain the
longest such prefix, and find all entries with a given prefix. Like a
tree-backed container but not a hash table, a trie is ordered, and can
be enumerated in the sort order of the entry type.

This library provides persistent or immutable trie containers, in the
sense that all updates return a separate trie, without modifying the
one passed in, but internally sharing any unmodified parts with it.

The main signatures are:

 * TRIE (trie.sig) - signature of a trie set container with arbitrary
   entry type

 * TRIE_MAP (trie-map.sig) - signature of a polymorphic-value trie map
   container with arbitrary key type

 * PATTERN_MATCH_TRIE (pattern-match-trie.sig) - signature extending
   TRIE with the capability of matching sequences with wildcards in
   them. Unlike TRIE, this exposes the types of the individual
   elements in each entry (e.g. char for a trie with string entries)

 * PATTERN_MATCH_TRIE_MAP (pattern-match-trie-map.sig) - signature
   extending TRIE_MAP with the capability of matching sequences with
   wildcards in them, like PATTERN_MATCH_TRIE

There are three core trie implementations provided, all implementing
trie-maps:

 * ListMTrieMapFn (list-mtrie-map-fn.sml) - a functor that takes a
   comparable element type and implements a PATTERN_MATCH_TRIE_MAP in
   which the entry type is a list of that element. The implementation
   uses a red-black tree map (from the SML/NJ library) at every trie
   node. This is better suited to wide, shallow trie structures than
   narrow, deep ones, but can be surprisingly efficient in both time
   and space. Insertion and enumeration are relatively cheap and
   lookup is relatively more expensive.

 * ListATrieMapFn (list-atrie-map-fn.sml) - a functor that takes an
   element type that can be mapped compactly onto a small integer
   range, and implements a PATTERN_MATCH_TRIE_MAP in which the entry
   type is a list of that element. The implementation uses an array
   (or rather a vector) at each node, extending the vector to span the
   range of inserted values. This is better suited than ListMTrieMapFn
   to narrow, deep structures, such as string tries; but note that
   memory usage can be very high if elements can map to very distant
   integers. For example, a trie whose entries were lists of Unicode
   codepoints would be prohibitively expensive in comparison with a
   trie of lists of ASCII characters. Lookups are relatively cheap and
   insertion is relatively more expensive.

 * ListBTrieMapFn (list-btrie-map-fn.sml) - a functor that takes an
   element type that can be mapped compactly onto a small integer
   range, and implements a PATTERN_MATCH_TRIE_MAP in which the entry
   type is a list of that element. The implementation uses a
   bitmap-compressed semi-sparse array at each node. This is best
   suited to entries whose elements map sparsely into a small range.

These functors provide set-type trie structures:

 * TrieFn (trie-fn.sml) - a functor that turns a TRIE_MAP into a TRIE

 * PatternMatchTrieFn (pattern-match-trie-fn.sml) - a functor that
   turns a PATTERN_MATCH_TRIE_MAP into a PATTERN_MATCH_TRIE

 * ListMTrieFn, ListATrieFn, ListBTrieFn (pattern-match-trie-fn.sml) -
   shorthands that turn an element type directly into a trie set (the
   set equivalents of *TrieMapFn)

And there are specialisations for string entries:

 * StringMTrieMap, StringATrieMap, StringBTrieMap
   (string-trie-map.sml) - trie-maps with string key type

 * StringMTrie, StringATrie, StringBTrie (string-trie.sml) - trie sets
   with string key type

 * StringTrieMap, StringTrie - aliases for StringATrieMap, StringATrie

Basic unit tests are provided. With the MLton compiler, run

 $ mlton test.mlb && ./test

To use in other projects, include trie.mlb from your MLB file.

Copyright 2015-2018 Chris Cannam.
MIT/X11 licence. See the file COPYING for details.

